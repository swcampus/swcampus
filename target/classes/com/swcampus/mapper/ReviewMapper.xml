<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.swcampus.mapper.ReviewMapper">

	<!-- 리뷰 등록 -->
	<insert id="insert">
	
		<selectKey keyProperty="reviewId" order="BEFORE" resultType="Long">
			select seq_review.nextval from dual
		</selectKey>
	
		insert into review(reviewId, email, lectureId, starRating, regDate, contents)
			values(#{reviewId}, #{email}, #{lectureId}, #{starRating}, sysdate, #{contents})
	</insert>
	
	<!-- 전체 리뷰 -->
	<select id="getAllList" resultType="com.swcampus.domain.ReviewVO">
		<![CDATA[
			select * 
				from (select rownum rn, review.*
							from review
							where rownum <= #{pageNum} * #{amount}
					)
				where rn > (#{pageNum} - 1) * #{amount}
		]]>
	</select>
	
	<!-- 페이징 처리된 전체 리뷰 목록 -->
	<select id="getAllListWithPaging" resultType="com.swcampus.domain.ReviewVO">
		<![CDATA[
			select * 
				from (select rownum rn, review.*
							from review
							where rownum <= #{pageNum} * #{amount}
					)
				where rn > (#{pageNum} - 1) * #{amount}
		]]>
	</select>
	
	<!-- 특정 강좌에 해당하는 리뷰 목록 -->
	<select id="getListByLectureId" parameterType="com.swcampus.domain.Criteria" resultType="com.swcampus.domain.ReviewVO">
		<![CDATA[
			select * 
				from (select rownum rn, review.*
							from review
							where rownum <= #{cri.pageNum} * #{cri.amount}
								and lectureId = #{lectureId}
					)
				where rn > (#{cri.pageNum} - 1) * #{cri.amount}
		]]>		
	</select>
	
	<!-- 내가 작성한 리뷰 목록 -->
	<select id="getMyList" resultType="com.swcampus.domain.ReviewVO">
		select * from review where email = #{email} order by reviewId desc
	</select>
	
	<!-- 승인 리뷰 목록 -->
	<select id="getApprovedList" resultType="com.swcampus.domain.ReviewVO">
		select * from review where approval = '승인'
	</select>
	
	<!-- 미승인 리뷰 목록 -->
	<select id="getUnapprovedList" resultType="com.swcampus.domain.ReviewVO">
		select * from review where approval = '미승인'
	</select>
	
	<!-- 리뷰 상세 -->
	<select id="read" resultType="com.swcampus.domain.ReviewVO">
		select * from review where reviewId = #{reviewId}
	</select>
	
	<!-- 리뷰 수정 -->
	<update id="update">
		update review 
			set lectureId = #{lectureId},
				starRating = #{starRating},
				contents = #{contents}
			where reviewId = #{reviewId}	
	</update>
	
	<!-- 리뷰 삭제 -->
	<delete id="delete">
		delete from review where reviewId = #{reviewId}
	</delete>
	
	<!-- 베스트 강의 리뷰 8개 목록 -->
	<select id="getBestList" resultType="com.swcampus.domain.ReviewDTO">
		<![CDATA[
		select *
			from (
				select r.lectureId, ROUND(AVG(NVL(starRating, 0)), 1) AS average, COUNT(*) AS count 
					from review r 
					group by lectureId 
				) avg_lec, lecture l
    		where rownum <= 8 and avg_lec.lectureId = l.lectureId
    		order by average desc
    	]]>
	</select>
	
	<!-- 최신 강의 리뷰 8개 목록 -->
	<select id="getNewsetList" resultType="com.swcampus.domain.ReviewVO">
		<![CDATA[
			select * from (select * from review order by regDate desc) where rownum <= 8
		]]>
	</select>
	
	<!-- 리뷰 승인 상태 변경 -->
	<update id="updateApproval">
		update review
			set approval = #{approval}
			where lectureId = #{lectureId}
	</update>
	
	<!-- 전체 리뷰 개수 -->
	<select id="getReviewListCnt" resultType="Long">
		select count(*) from review where reviewId > 0
	</select>
	
	<!-- 특정 강의의 리뷰 개수 -->
	<select id="getReviewListCntByLectureId" resultType="Long">
		select count(*) from review where lectureId = #{lectureId} and reviewId > 0
	</select>
	
	<!-- 특정 강의의 리뷰 평점 -->
	<select id="getStarRatingByLectureId" resultType="Float">
		select ROUND(AVG(NVL(starRating, 0)), 1) from review where lectureId = #{lectureId}
	</select>
	
</mapper>